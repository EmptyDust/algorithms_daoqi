//最大生成树--》只需将边权取反即可
//次小生成树
	//1.非严格次小生成树：在进行kruskal时，同时建树，然后暴力枚举每条边时利用lca求u，v之间的最大边权用于替换
	//2.严格次小生成树：只需再同时维护一个次大值即可
//kruskal重构树：其相当于一个大根堆，u，v的lca的点权相当于u到v的最小瓶颈（边权最大值最小）
//不要忘了 boruvka算法求最小生成树
//最小生成树计数：因为最小生成树的某一个权值的边数是固定的，所以记录每个权值用的数量，然后爆搜

template<typename T>
struct MST {
    int n;
    std::vector<std::vector<int>> adj;
    std::vector<T> val;
    std::vector<std::tuple<T, int, int>> E;
    std::vector<int> fa, doc;

    MST(int n_) : n(n_) {};

    void addEdge(int u, int v, T w) {
        E.emplace_back(w, u, v);
    }

    int find(int x) {
        while (x != fa[x]) {
            x = fa[x] = fa[fa[x]];
        }
        return x;
    }

    T Kruskal() {
        if (fa.empty())fa.assign(n, 0);
        iota(fa.begin(), fa.end(), 0);
        doc.clear();
        sort(E.begin(), E.end());
        T ans = 0;
        int cnt = 0;

        for (int i = 0; i < E.size(); i++) {
            auto [w, u, v] = E[i];
            int fu = find(u), fv = find(v);

            if (fu != fv) {
                fa[fu] = fv;
                doc.push_back(i);
                ans += w;
                cnt++;
            }
            if (cnt == n - 2) return ans;
        }
        return -1;
    }

    int KruskalRsTree() {
        fa.assign(2 * n - 2, 0);
        std::iota(fa.begin(), fa.end(), 0);
        adj.resize(2 * n - 2);
        val.resize(2 * n - 2);

        for (int i = 0; i < doc.size(); i++) {
            auto [w, u, v] = E[doc[i]];
            adj[n + i].emplace_back(find(u));
            adj[n + i].emplace_back(find(v));
            val[n + i] = w;
            fa[find(u)] = fa[find(v)] = n + i;
        }

        return n + doc.size() - 1;
    }
};