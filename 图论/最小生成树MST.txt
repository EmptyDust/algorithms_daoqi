//最大生成树--》只需将边权取反即可
//次小生成树
	//1.非严格次小生成树：在进行kruskal时，同时建树，然后暴力枚举每条边时利用lca求u，v之间的最大边权用于替换
	//2.严格次小生成树：只需再同时维护一个次大值即可
//kruskal重构树：其相当于一个大根堆，u，v的lca的点权相当于u到v的最小瓶颈（边权最大值最小）
//不要忘了 boruvka算法求最小生成树
//最小生成树计数：因为最小生成树的某一个权值的边数是固定的，所以记录每个权值用的数量，然后爆搜

template<typename T>
struct MST {
    int n,m,inf;
    std::vector<std::vector<std::pair<int, T>>> adj;
    std::vector<std::tuple<T,int,int>> E;
    std::vector<bool> vis;
    std::vector<T> dis;
    std::vector<int> fa;
    MST() {};
    MST(int _n,int _m = 0 ,T _d = 1e9) : n(_n),m(_m),inf(_d){
        Init(_n);
    }
    void Init(int _n) {
        vis.assign(_n, false);
        dis.assign(_n, inf);
        adj.assign(_n, {});
    }
    void addEdge1(int u, int v, T w) {
        adj[u].emplace_back(v, w);
    }
    void addEdge2(int u, int v, T w) {
        adj[u].emplace_back(v, w);
        adj[v].emplace_back(u, w);
    }
    void addEdge3(int u,int v,T w){
        E.emplace_back(w,u,v);
    }
    int find(int x) {
        while (x != fa[x]) {
            x = fa[x] = fa[fa[x]];
        }
        return x;
    }
    T Prim(int s = 1) {
        dis[s] = 0;
        T ans = 0;int cnt = 0;
        for (int i = 1; i < n; i++) {
            int u = 0;
            for (int j = 1; j < n; j++)
                if (!vis[j] && dis[j] < dis[u]) u = j;

            ans += dis[u];vis[u] = true;
            if (dis[u] != inf) cnt++;

            for (auto [v, w]: adj[u])
                if (dis[v] > w) dis[v] = w;
        }
        if (cnt != n - 1) return -1;
        return ans;
    }

    T Kruskal(int s = 1){
        if(fa.empty()) fa.assign(n,0);
        iota(fa.begin(),fa.end(),0);
        sort(E.begin(),E.end());
        T ans=0;int cnt=0;
        for(int i=0;i<m;i++){
            auto [w,u,v]=E[i];
            int fu=find(u),fv=find(v);
            if(fu!=fv){
                fa[fu]=fv;
                ans+=w;
                cnt++;
            }
            if(cnt==n-2) return ans;
        }
        return -1;
    }
};