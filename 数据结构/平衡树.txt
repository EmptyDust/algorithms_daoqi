//普通splay平衡树
struct Tree {
#define ls(x) tr[x].son[0]
#define rs(x) tr[x].son[1]

    struct node {
        int son[2];//左右儿子
        int parent;//父亲
        int val;//节点权值
        int cnt;//权值出现次数
        int siz;//子树大小
        void init(int parent_, int val_) {
            parent = parent_, val = val_;
            cnt = siz = 1;
        }
    } tr[N];

    int root, idx;//根节点编号，节点个数
    void Init() {
       memset(tr,0,sizeof(tr[0])*(idx+1));
        root=idx = 0;
        insert(1e9);
        insert(-1e9);
    }

    void pushup(int x) {//x下标
        tr[x].siz = tr[ls(x)].siz + tr[rs(x)].siz + tr[x].cnt;
    }

    void rotat(int x) {//左旋右旋
        int y = tr[x].parent, z = tr[y].parent;//父节点，爷爷节点
        int k = tr[y].son[1] == x;//判断x是y的左孩子还是右孩子
        tr[z].son[tr[z].son[1] == y] = x;//先判断y是左孩子还是右孩子，再x将原来y的位置顶替
        tr[x].parent = z;
        tr[y].son[k] = tr[x].son[k ^ 1];//若x是y的左孩子则进行右旋，将x的右孩子转移到y的左孩子上，反之亦然
        tr[tr[x].son[k ^ 1]].parent = y;
        tr[x].son[k ^ 1] = y;
        tr[y].parent = x;
        pushup(y);
        pushup(x);
    }

    void splay(int x, int k) {
        while (tr[x].parent != k) {
            int y = tr[x].parent, z = tr[y].parent;
            if (z != k)//折转底，直转中
                (ls(y) == x) ^ (ls(z) == y) ? rotat(x) : rotat(y);

            rotat(x);
        }
        if (!k) root = x;
    }

    void insert(int v) {//插入数值v
        int x = root, p = 0;
        while (x && tr[x].val != v) {
            p = x, x = tr[x].son[v > tr[x].val];
        }

        if (x) tr[x].cnt++;
        else {
            x = ++idx;
            tr[p].son[v > tr[p].val] = x;
            tr[x].init(p, v);
        }
        splay(x, 0);
    }

    void find(int v) {//找到数值v并转到根
        int x = root;
        while (tr[x].son[v > tr[x].val] && v != tr[x].val) x = tr[x].son[v > tr[x].val];
        splay(x, 0);
    }

    int get_pre(int v) {//数值v前驱的编号
        find(v);
        int x = root;
        if (tr[x].val < v) return x;
        x = ls(x);
        while (rs(x)) x = rs(x);

        splay(x, 0);
        return x;
    }

    int get_suc(int v) {//数值v后继的节点
        find(v);
        int x = root;
        if (tr[x].val > v) return x;
        x = rs(x);
        while (ls(x)) x = ls(x);

        splay(x, 0);
        return x;
    }

    void del(int v) {//数值v删除
        int pre = get_pre(v);
        int suc = get_suc(v);
        splay(pre, 0);
        splay(suc, pre);
        int del = tr[suc].son[0];
        if (tr[del].cnt > 1) {
            tr[del].cnt--, splay(del, 0);
        } else {
            tr[suc].son[0] = 0, splay(suc, 0);
        }
    }

    int get_rank(int v) {//数值排名
        insert(v);
        int res = tr[tr[root].son[0]].siz;
        del(v);
        return res;
    }

    int get_val_by_rank(int k) {//数值
        int x = root;
        while (1) {
            int y = ls(x);
            if (tr[y].siz + tr[x].cnt < k) {
                k -= tr[y].siz + tr[x].cnt;
                x = rs(x);
            } else if (tr[y].siz >= k) {
                x = y;
            } else break;
        }
        splay(x, 0);
        return tr[x].val;
    }

} splay;

signed main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int t;
    cin >> t;
    splay.Init();
    while (t--) {
        int op, x;
        cin >> op >> x;
        if (op == 1) splay.insert(x);
        else if (op == 2) splay.del(x);
        else if (op == 3) cout << splay.get_rank(x) << "\n";
        else if (op == 4) cout << splay.get_val_by_rank(x + 1) << '\n';
        else if (op == 5) cout << splay.tr[splay.get_pre(x)].val << '\n';
        else cout << splay.tr[splay.get_suc(x)].val << '\n';
    }
    return 0;
}



#include <bits/stdc++.h>
using namespace std;
#define ll long long
const int N=1e7+5;
//文艺平衡树Splay
#define ls(x) tr[x].son[0]
#define rs(x) tr[x].son[1]
struct node{
    int son[2];//左右儿子
    int parent;//父亲
    int val;//节点权值
    int siz;//子树大小
    int tag;//懒标记
    void init(int parent_,int val_){
        parent=parent_,val=val_;
        siz=1;
    }
}tr[N];
int root,idx;//根节点编号，节点个数
int n,m;
void pushup(int x){//x下标
    tr[x].siz=tr[ls(x)].siz+tr[rs(x)].siz+1;
}

void pushdown(int x){//下传
    if(tr[x].tag){
        swap(ls(x),rs(x));
        tr[ls(x)].tag^=1;
        tr[rs(x)].tag^=1;
        tr[x].tag=0;
    }
}
void rotat(int x){//左旋右旋
    int y=tr[x].parent,z=tr[y].parent;//父节点，爷爷节点
    int k=tr[y].son[1]==x;//判断x是y的左孩子还是右孩子
    tr[z].son[tr[z].son[1]==y]=x;//先判断y是左孩子还是右孩子，再x将原来y的位置顶替
    tr[x].parent=z;
    tr[y].son[k]=tr[x].son[k^1];//若x是y的左孩子则进行右旋，将x的右孩子转移到y的左孩子上，反之亦然
    tr[tr[x].son[k^1]].parent=y;
    tr[x].son[k^1]=y;
    tr[y].parent=x;
    pushup(y);
    pushup(x);
}

void splay(int x,int k){
    while(tr[x].parent!=k){
        int y=tr[x].parent,z=tr[y].parent;
        if(z!=k)//折转底，直转中
            (ls(y)==x)^(ls(z)==y)? rotat(x): rotat(y);

        rotat(x);
    }
    if(!k) root=x;
}

void insert(int v){//插入数值v
    int x=root,p=0;
    while(x){
        p=x,x=tr[x].son[v>tr[x].val];
    }
    x=++idx;
    tr[p].son[v>tr[p].val]=x;
    tr[x].init(p,v);
    splay(x,0);
}


int get_k(int k){//返回排名第k的数节点编号
    int x=root;
    while(1){
        pushdown(x);
        int y=ls(x);
        if(tr[y].siz+1<k) k-=tr[y].siz+1,x=rs(x);
        else if(tr[y].siz>=k) x=y;
        else return x;
    }
}

void output(int x){//中序遍历输出
    pushdown(x);
    if(ls(x)) output(ls(x));
    if(tr[x].val>=1&&tr[x].val<=n) cout<<tr[x].val<<" ";
    if(rs(x)) output(rs(x));
}
int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    insert(1e-9);
    insert(1e9);
    cin>>n>>m;
    for(int i=1;i<=n;i++) insert(i);
    int l,r;
    while(m--){
        cin>>l>>r;
//把[l,r]夹挤到l-1和r+1之间
        l=get_k(l),r= get_k(r+2);
        splay(l,0);
        splay(r,l);
        tr[ls(r)].tag^=1;
    }
    output(root);
    return 0;
}
