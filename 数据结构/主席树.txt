#include <bits/stdc++.h>
using namespace std;
#define ll long long
const int N=3e5+5;
//可持久化线段树(主席树)
#define N 200005
#define lc(x) tr[x].ch[0]
#define rc(x) tr[x].ch[1]
int n,m,a[N];
vector<int> v;
struct node{
    int ch[2];
    int s;//节点值域中有多少数
}tr[N*22];
int root[N],idx;
void build(int &x,int l,int r){
    x=++idx;
    if(l==r) return;
    int mid=(l+r)>>1;
    build(lc(x),l,mid);
    build(rc(x),mid+1,r);
}
void insert(int x,int &y,int l,int r,int v){
    y=++idx;tr[y]=tr[x];tr[y].s++;
    if(l==r) return;
    int mid=(l+r)>>1;
    if(v<=mid) insert(lc(x),lc(y),l,mid,v);
    else insert(rc(x),rc(y),mid+1,r,v);
}

int query(int x,int y,int l,int r,int k){
    if(l==r) return l;
    int mid=(l+r)>>1;
    int s=tr[lc(y)].s-tr[lc(x)].s;
    if(k<=s) return query(lc(x),lc(y),l,mid,k);
    else return query(rc(x),rc(y),mid+1,r,k-s);
}
int getid(int x){
    return lower_bound(v.begin(),v.end(),x)-v.begin()+1;
}
int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin>>n>>m;
    for(int i=1;i<=n;i++){
        cin>>a[i];v.push_back(a[i]);
    }
    sort(v.begin(),v.end());
    v.erase(unique(v.begin(),v.end()),v.end());//进行离散化
    int vn=v.size();
    build(root[0],1,vn);
    for(int i=1;i<=n;i++){
        int id=getid(a[i]);
        insert(root[i-1],root[i],1,vn,id);
    }
    for(int i=1;i<=m;i++){
        int l,r,k;cin>>l>>r>>k;
        int id=query(root[l-1],root[r],1,vn,k)-1;
        cout<<v[id]<<endl;
    }
    system("pause");
    return 0;
}