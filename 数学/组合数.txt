//用逆元求组合数
template<typename T>
struct Comb {
    //大质数-->1999999999999999909
    const T mod = 1e9 + 7;
    std::vector<T> fav,inv;
    Comb(){
        fav.resize((int)1e6+5);
        inv.resize((int)1e6+5);
        Init((int)1e6);
    }
    Comb(T n){
        fav.resize(n+5);
        inv.resize(n+5);
        Init(n);
    }
    T fast_pow(T a, T b, T p) {
        a %= p;
        T ans = 1;
        while (b) {
            if (b & 1) ans = (ans * a) % p;
            a = (a * a) % p;
            b >>= 1;
        }
        return ans;
    }
    //Cnm=n!/((n-m)!*m!)
    void Init(T n) {
        fav[0] = inv[0] = 1;
        for (int i = 1; i <= n; i++) {
            fav[i] = fav[i - 1] * i % mod;//求n的阶乘
        }
        inv[n] = fast_pow(fav[n], mod - 2, mod);
        for (int i = n; i > 0; i--) {
            inv[i - 1] = inv[i] * i % mod;//求n的阶乘的逆元
        }
    }

    T C(T n, T m) {
        if (n < 0 || m < 0 || n < m) return 0;
        return fav[n] * inv[m] % mod * inv[n - m] % mod;
    }

    T A(T n, T m) {
        if (n < 0 || m < 0 || n < m) return 0;
        return (fav[n] * inv[n - m]) % mod;
    }
};