//知识区
1.
x=b^p,求最大的p
有唯一分解定理x=p1^a1*p2^a2....pn^an,则p=gcd(a1,a2,....an);
若x为负数，p一定为奇数，所以求出来的p若为偶数，则要不断除2，知道p为奇数

2.
求n!中可以分解出几个x
int ans=0;
while(n){
 ans+=n/x;
 n/=x;
}

3.
一个数组内的元素两两相乘之和，等于(元素之和的平方-元素平方之和)/2；

4.
欧拉定理：if gcd(a,m)==1,则a^phi[m]%m=1
扩展欧拉定理：a^b --> if(b<phi[m]) a^b%m=a^b%m, if(b>=phi[m])则 a^b=(a^(b%phi[m]+phi[m]))%m;

5.
威尔逊定理：(p-1)!==1(mod p)是p为质数的充分必要条件

6. 环染色问题：
	n个节点的环，一共有k中颜色，相邻两节点的颜色不能相同，一共有多少种方法染色：(k-1)^n+(-1)^n*(k-1);
	polya定理 ：用m种颜色给n元环染色的方案数为：(for(k,1,n) m^gcd(k,n))/n!


7.中点相同可以构成平行四边形  
	  /\
        /    \
        \    /
	  \/
-----------------------------------

8.错排递推式 dp[i]=(i-1)*(dp[i-1]+dp[i-2])(n>2)  错排指每个数都不在自己位置上的方案数，dp[1]=0,dp[2]=dp[0]=1;

9.卡特兰数  Hn = C(2n , n)-C(2n , n-1) = C(2n , n)/(n+1) = (4n-2)*Hn-1/(n+1)

10第二类斯特林数
	n个不同小球，m个相同盒子，没有空
	sum=0;
	for(int i=0;i<=m;i++){
        	sum+=((i)&1?-1:1)*comb.C(m,i)*power(m-i,n);
   	 }
	sum /=m!;
	动态规划：
	dp[n][m]=dp[n-1][m]*m+dp[n-1][m-1];


11曼哈顿距离转化为切比雪夫距离
	(x1,y1),(x2,y2)-->(x1+y1,y1-x1),(x2+y2,y2-x2)--->(x1`,y1`),(x2`,y2`),
	两点之间距离为abs(x1-x2)+abs(y1-y2)=max(abs(x1`-x2`),abs(y1`-y2`))

//代码区
//快速幂算法，求(a^b)%c的结果
ll fast_pow(ll a,ll b, ll c){
    a%=c;ll ans=1;
    while(b){
        if(b&1) ans=(ans*a)%c;
        b>>=1;
        a=(a*a)%c;
    }
    return ans;
}


//矩阵快速幂
const int mod=1e9+7;
#define ll long long
struct matrix{
    ll c[101][101];
    matrix(){memset(c,0,sizeof(c));}
}A,res;
ll n,k;
matrix operator*(matrix &x,matrix &y){
    matrix t;//临时矩阵
    for(int i=1;i<=n;i++)
        for(int j=1;j<=n;j++)
            for(int k=1;k<=n;k++)
                t.c[i][j]=(t.c[i][j]+x.c[i][k]*y.c[k][j])%mod;
    return t;
}
void matrix_pow(ll k){//快速幂
    for(int i=1;i<=n;i++) res.c[i][i]=1;//单位矩阵
    while(k){
        if(k&1) res=res*A;
        A=A*A;
        k>>=1;
    }
}



//最大公约数算法(欧几里得算法)
int gcd(int a,int b){
    if(b==0) return a;
    return gcd(b,a%b);
}

//最小公倍数
ans=(a*b)/gcd(a,b);


//求逆元，所谓逆元就是(a/b)%p==x,找出一个数使得（a*b')%p==x,那么b'就是b的逆元，并且(b*b')%p是恒等于1的
//求逆元1
int fast_pow(int x,int b,int p){
    int ans=1;x%=p;
    while(b){
        if(b&1){
            ans=(ans*x)%p;
        }
        x=(x*x)%p;
        b>>=1;
    }
    return ans;
}
//求得模p的话，x的逆元是多少
//限制：p必须是质数
int get_inv(int x,int p){
    return fast_pow(x,p-2,p);//x的p-2次方模p之后的结果就是x的逆元
}

//求逆元2
//利用扩展欧几里得算法求逆元
//求a的逆元
//即a*a'+py==1==gcd(a',p),限制：a,p要互质
void exgcd(int a,int p,int &x,int &y){
    if(p==0){
        x=1,y=0;
        return;
    }
    exgcd(p,a%p,y,x);
    y-=(a/p)*x;
}
int get_inv2(int a,int p){
    int x=1,y=0;
    exgcd(a,p,x,y);
    return (x%p+p)%p;//防止出现负数
}


//求逆元3
#define ll long long
//线性求逆元，即求从1到n对p的逆元
ll  inv[3000002];
void link_inv() {
    inv[1]=1;
    ll  n,p;cin>>n>>p;
    for (ll i=2;i<=n;i++){
        inv[i]=-(p/i)*inv[p%i];
        inv[i]=(inv[i]%p+p)%p;//防止出现负数
    }
}


//求约数个数 
//原理：例12可分解为2^2*3*1,所以ans=(2+1)*(1+1),即每个数的幂指数加一相乘 
int main(){
	int n,count=1;
	cin>>n;13
	unordered_map<int,int> mp;
	for(int i=2;i<=n;i++){
		while(n%i==0){
			n/=i;mp[i]++;
		}
	} 
	for(auto x: mp){
		count*=(x.second+1);
	}
	cout<<count<<endl;
	return 0;
}


#include <bits/stdc++.h>
using namespace std;
//求约数个的和 
//原理：例12可分解为2^2*3*1,所以ans=(2^0+2^1+2^2)*(3^0+3^1)

int f(int a,int b){
	int r=1,k=a;
	for(int i=1;i<=b;i++){
		r+=k,k*=a;
	}
	return r;
}
int main(){
	int n,sum=1;
	cin>>n;
	unordered_map<int,int> mp;
	for(int i=2;i<=n;i++){
		while(n%i==0){
			n/=i;mp[i]++;
		}
	} 
	for(auto x: mp){
		sum*=f(x.first,x.second);
	}
	cout<<sum<<endl;
	return 0;
}



int p[N],vis[N],cnt;
int phi[N];
void get_phi(int n){//筛法求欧拉函数
    phi[1]=1;
    for(int i=2;i<=n;i++){
        if(!vis[i]){//vis是由埃式筛求质数后得到的,是质数
            p[cnt++]=i;
            phi[i]=i-1;
        }
        for(int j=0;i*p[j]<=n;j++){
            int m=i*p[j];
            vis[m]=1;
            if(i%p[j]==0){
                phi[m]=p[j]*phi[i];
                break;
            }else{
                phi[m]=(p[j]-1)*phi[i];
            }
        }
    }
}

int p[N],vis[N],cnt;
int a[N];//a[i]记录i的最小值因子的次数
int d[N];//d[i]记录i的约数个数
void get_d(int n){//筛法求约数个数
    d[1]=1;
    for(int i=2;i<=n;i++){
        if(!vis[i]){//是质数
            p[++cnt]=i;
            a[i]=1;d[i]=2;
        }
        for(int j=1;i*p[j]<=n;j++){
            int m=i*p[j];
            vis[m]=1;
            if(i%p[j]==0){
                a[m]=a[i]+1;
                d[m]=d[i]/a[m]*(a[m]+1);
                break;
            }else{
                a[m]=1;d[m]=d[i]*2;
            }
        }
    }
}


int p[N],vis[N],cnt;
//g[i]表示i的最小质因子的1+p^1+...+p^k
int g[N],f[N];//f[i]表示i的约数和
void get_f(int n){//筛法求约数和
    g[1]=f[1]=1;
    for(int i=2;i<=n;i++){
        if(!vis[i]){//vis[i]是质数
            p[++cnt]=i;
            g[i]=f[i]=i+1;
        }
        for(int j=1;i*p[j]<=n;j++){
            int m=i*p[j];
            vis[m]=1;
            if(i%p[j]==0){
                g[m]=g[i]*p[j]+1;
                f[m]=f[i]/g[i]*g[m];
                break;
            }else{
                g[m]=p[j]+1;
                f[m]=f[i]*g[m];
            }
        }
    }
}

//筛法求莫比乌斯函数
int p[N],vis[N],cnt,mu[N];
void get_mu(int n){
    mu[1]=1;
    for(int i=2;i<=n;i++){
        if(!vis[i]){
            p[++cnt]=i;
            mu[i]=-1;
        }
        for(int j=1;i*p[j]<=n;j++){
            vis[i*p[j]]=1;
            if(i%p[j]==0){
                mu[i*p[j]]=0;
                break;
            }else{
                mu[i*p[j]]=-mu[i];
            }
        }
    }
}


//高斯消元法
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
//高斯消元法
int n,m;
double a[1000][1000];
const double eps=1e-9;
bool gauss(){
    for(int i=1;i<=n;i++){//枚举行列
        int r=i;
        for(int k=i;k<=n;k++){//找非零行
            if(fabs(a[k][i])>eps){
                r=k;break;
            }
        }
        if(r!=i) swap(a[r],a[i]);
        if(fabs(a[i][i])<eps) return 0;
        for(int j=n+1;j>=i;j--){//变一
            a[i][j]/=a[i][i];
        }
        for(int k=i+1;k<=n;k++){//变零
            for(int j=n+1;j>=i;j--){
                a[k][j]-=a[k][i]*a[i][j];
            }
        }
    }
    for(int i=n-1;i>=1;i--){//回代
        for(int j=i+1;j<=n;j++){
            a[i][n+1]-=a[i][j]*a[j][n+1];
        }
    }
    return 1;//存在唯一解
}
int main(){
    cout.tie(0)->sync_with_stdio(false);
    cin.tie(0);
    cin>>n;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=n+1;j++){
            cin>>a[i][j];
        }
    }
    if(gauss()) {
        for (int i = 1; i <= n; i++) {
            cout << fixed << setprecision(2) << a[i][n + 1] << endl;
        }
    }else{
        cout<<"No Solution"<<endl;
    }
    system("pause");
    return 0;
}







//整数分块
int block(int n){
    int ans=0;
    for(int l=1,r;l<=n;l=r+1){
        r=min(n,n/(n/l));
        ans+=(n/l)*(r-l+1);
    }
    return ans;
}