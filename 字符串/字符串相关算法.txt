//KMP算法
void KMP(){
    string s,p;cin>>s>>p;//s是主串
    int n=p.size(),m=s.size();
    s=" "+s;p=" "+p;
    vector<int> ne(p.size());
    ne[1]=0;
    for(int i=2,j=0;i<=n;i++){
        while(j&&p[i]!=p[j+1]) j=ne[j];
        if(p[i]==p[j+1]) j++;
        ne[i]=j;
    }
    for(int i=1,j=0;i<=m;i++){
        while(j&&s[i]!=p[j+1]) j=ne[j];
        if(s[i]==p[j+1]) j++;
        if(j==n) cout<<i-n+1<<'\n';//输出符合要求的所有位置，可根据要求更改代码
    }
    for(int i=1;i<=n;i++){
        cout<<ne[i]<<" ";
    }
}

//扩展KMP算法（z函数）
void get_z(string s,int n){
    vector<int> z(n+1);
    z[1]=n;
    for(int i=2,l,r=0;i<=n;i++){
        if(i<=r) z[i]=min(z[i-l+1],r-i+1);
        while(s[1+z[i]]==s[i+z[i]]) z[i]++;
        if(i+z[i]-1>r) l=i,r=i+z[i]-1;
    }
}


//最小最大表示法
int minmum(int len) // 最小表示法
{
    int i = 0, j = 1, k = 0;
    while(i < len && j < len && k < len){
        int temp = x[(i + k) % len] - x[(j + k) %len];
        if(temp == 0) k++;
        else{
            if(temp > 0) i = i + k + 1;
            else j = j + k + 1;
            if(i == j) j++;
            k = 0;
        }
    }
    return i < j ? i : j;
}
int  maxmum(int len) // 最大表示法
{
    int i = 0, j = 1, k = 0;
    while(i < len && j < len && k < len){
        int temp = x[(i + k) % len] - x[(j + k) %len];
        if(temp == 0) k++;
        else{
            if(temp > 0) j = j + k + 1;
            else i = i + k + 1;
            if(i == j) j++;
            k = 0;
        }
    }
    return i < j ? i : j;
}


//Manacher算法
string manacherString(string s) {
    int len = s.size() * 2 + 1;
    int index = 0;
    string res;
    for (int i = 0; i < len; i++) {
        res += (i & 1) == 0 ? '#' : s[index++];
    }
    return res;
}
int manacher(string s) {
    if (s.size() == 0) {
        return 0;
    }
    string str = manacherString(s);//加入特殊字符后的字符串
    vector<int> pArr(str.size());
    int c = -1;//中心
    int r = -1;//回文右边界再往右一个位置
    int maxn = INT_MIN;
    for (int i = 0; i < str.size(); i++) {
        pArr[i] = r > i  ?  min(pArr[2 * c - i], r - i):1;
        while (i + pArr[i]<str.size() && i - pArr[i]>-1) {
            if (str[i + pArr[i]] == str[i - pArr[i]])
                pArr[i]++;
            else
                break;
        }
        if (i + pArr[i] > r) {
            r = i + pArr[i];
            c = i;
        }
        maxn = max(maxn, pArr[i]);
    }
    return maxn - 1;
}


//AC自动机

#include <bits/stdc++.h>
using namespace std;
const int N=2e6+5;
typedef long long ll;
//AC自动机
int ch[N][26],cnt[N],idx;
int ne[N];
void insert(string s){
    int p=0;
    for(int i=0;i<s.size();i++){
        int j=s[i]-'a';
        if(!ch[p][j]) ch[p][j]=++idx;
        p=ch[p][j];
    }
    cnt[p]++;
}
void build(){//建AC自动机
    queue<int> q;
    for(int i=0;i<26;i++) if(ch[0][i]) q.push(ch[0][i]);
    while(q.size()){
        int u=q.front();q.pop();
        for(int i=0;i<26;i++){
            int v=ch[u][i];
            if(v) ne[v]=ch[ne[u]][i],q.push(v);
            else ch[u][i]=ch[ne[u]][i];
        }
    }
}
int query(string s){
    int ans=0;
    for(int i=0,k=0;k<s.size();k++){
        i=ch[i][s[k]-'a'];
        for(int j=i;j&&~cnt[j];j=ne[j]){
            ans+=cnt[j],cnt[j]=-1;
        }
    }
    return ans;
}
signed main(){
    ios::sync_with_stdio(false);cin.tie(0);
    memset(ch,0,sizeof (ch));
    memset(ne,0,sizeof (ne));
    memset(cnt,0,sizeof (cnt));

    vector<string> s;
    int n;cin>>n;
    for(int i=0;i<=n;i++){
        string tmp;cin>>tmp;
        s.push_back(tmp);
    }
    for(int i=0;i<n;i++)
        insert(s[i]);
    build();
    int ans= query(s.back());
    cout<<ans<<"\n";
    return 0 ;
}



//后缀数组，时间复杂度（n*logn）
struct SA {
    int n, m;//n为后缀个数，m为桶的个数
    int x[N], y[N], c[N], sa[N], rk[N], he[N];
    int s[N];
    int dp[N][20];
    void Init() {
        n = 0, m = 200;
    }
//桶数组x[i],辅助数组y[i],计数数组c[i];
//后缀数组sa[i]表示排序为i的后缀编号，名次数组rk[i]表示rk[i]表示后缀i的排名
    void get_sa() {
        for (int i = 1; i <= m; i++) c[i] = 0;   //桶的初始化
        for (int i = 1; i <= n; i++) ++c[x[i] = s[i]];
        for (int i = 2; i <= m; i++) c[i] += c[i - 1];   //利用差分前缀和的思想知道每个关键字最多是在第几名
        for (int i = n; i >= 1; i--) sa[c[x[i]]--] = i;
        for (int k = 1; k <= n; k <<= 1) {
            int num = 0;
            for (int i = n - k + 1; i <= n; i++) y[++num] = i;
            for (int i = 1; i <= n; i++) if (sa[i] > k) y[++num] = sa[i] - k; //是否可以作为第二关键字
            for (int i = 1; i <= m; i++) c[i] = 0;
            for (int i = 1; i <= n; i++) c[x[i]]++;  //因为上一次循环已经求出这次的第一关键字了
            for (int i = 2; i <= m; i++) c[i] += c[i - 1];
            for (int i = n; i >= 1; i--){ //在同一第一关键字下，按第二关键字来排
                sa[c[x[y[i]]]--] = y[i];
                y[i] = 0;
            }
            swap(x, y);
            x[sa[1]] = 1;
            num = 1;
            for (int i = 2; i <= n; i++) {
                x[sa[i]] = (y[sa[i]] == y[sa[i - 1]] && y[sa[i] + k] == y[sa[i - 1] + k]) ? num : ++num;
            }
            if (num == n) break;
            m = num;
        }
    }
    void get_he() {
        for (int i = 1; i <= n; i++) rk[sa[i]] = i;
        for (int i = 1, k = 0; i <= n; i++) {//枚举后缀i
            if (rk[i] == 1) continue;//第一名he为0
            if (k) k--;//上一个后缀数组的he的值减一
            int j = sa[rk[i] - 1];
            while (i + k <= n && j + k <= n && s[i + k] == s[j + k]) k++;
            he[rk[i]] = k;
        }
    }
    void RMQ(){
        for(int i=1;i<=n;i++) dp[i][0]=he[i];
        for(int j=1;(1<<j)<=n;j++){
            for(int i=1;i+(1<<j)-1<=n;i++)
                dp[i][j]=min(dp[i][j-1],dp[i+(1<<(j-1))][j-1]);
        }
    }
    int lcp(int l,int r){
        l=rk[l],r=rk[r];
        if(l>r) swap(l,r);
        l++;
        int k=0;
        while((1<<(k+1))<=(r-l+1)) ++k;
        return min(dp[l][k],dp[r-(1<<k)+1][k]);
    }
} sa;